import { NextResponse } from 'next/server';
import nodemailer from 'nodemailer';
import QRCode from 'qrcode';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å
const transporter = nodemailer.createTransport({
  host: process.env.EMAIL_HOST,
  port: Number(process.env.EMAIL_PORT),
  secure: true, // –ò—Å–ø–æ–ª—å–∑—É–µ–º SSL
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASSWORD,
  },
});

export async function POST(request: Request) {
  try {
    const { name, email, id } = await request.json();

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è QR-–∫–æ–¥–∞
    const qrData = JSON.stringify({
      id: id,
      name: name,
      type: 'party-invitation'
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Data URL
    const qrCodeDataUrl = await QRCode.toDataURL(qrData);

    // HTML —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞
    const htmlContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <h1 style="color: #6B46C1; text-align: center;">19 –ª–∏—Ç—Ä–æ–≤ —Å—á–∞—Å—Ç—å—è</h1>
        <h2 style="text-align: center;">–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –±—É—Ö–∏—á</h2>
        
        <p>–ü—Ä–∏–≤–µ—Ç, ${name}!</p>
        
        <p>–ú—ã —Ä–∞–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ–º —Ç–µ–±—è –Ω–∞ –Ω–∞—à –±—É—Ö–∏—á!</p>
        
        <div style="background-color: #F3E8FF; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="color: #6B46C1; margin-top: 0;">–î–µ—Ç–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</h3>
          <p><strong>–î–∞—Ç–∞:</strong> 6 –∞–ø—Ä–µ–ª—è 2025</p>
          <p><strong>–í—Ä–µ–º—è:</strong> 16:00</p>
          <p><strong>–ê–¥—Ä–µ—Å:</strong> 2-—è –ò–ø–ø–æ–¥—Ä–æ–º–Ω–∞—è —É–ª–∏—Ü–∞, 24–ë</p>
        </div>
        
        <div style="text-align: center; margin: 30px 0;">
          <p style="margin-bottom: 15px;"><strong>–¢–≤–æ–π QR-–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞:</strong></p>
          <img src="${qrCodeDataUrl}" alt="QR Code" style="max-width: 200px;"/>
        </div>
        
        <p style="background-color: #EDF2F7; padding: 15px; border-radius: 8px;">
          ‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–∏ —ç—Ç–æ—Ç QR-–∫–æ–¥ ‚Äì –æ–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!
        </p>
        
        <p>–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –±—É—Ö–∏—á–µ! üéâ</p>
      </div>
    `;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
    await transporter.sendMail({
      from: `"19 –ª–∏—Ç—Ä–æ–≤ —Å—á–∞—Å—Ç—å—è" <${process.env.EMAIL_USER}>`,
      to: email,
      subject: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –±—É—Ö–∏—á - 19 –ª–∏—Ç—Ä–æ–≤ —Å—á–∞—Å—Ç—å—è',
      html: htmlContent,
    });

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error sending invitation:', error);
    return NextResponse.json(
      { error: 'Failed to send invitation' },
      { status: 500 }
    );
  }
} 